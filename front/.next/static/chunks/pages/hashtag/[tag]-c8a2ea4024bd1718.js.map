{"version":3,"file":"static/chunks/pages/hashtag/[tag]-c8a2ea4024bd1718.js","mappings":"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","sources":["webpack://_N_E/./pages/hashtag/[tag].js","webpack://_N_E/?9255","webpack://_N_E/./node_modules/react-intersection-observer/react-intersection-observer.modern.mjs","webpack://_N_E/<anon>"],"sourcesContent":["import React, { useCallback, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useRouter } from \"next/router\";\r\nimport { END } from \"redux-saga\";\r\nimport { useInView } from \"react-intersection-observer\";\r\n\r\nimport axios from \"axios\";\r\nimport { LOAD_HASHTAG_POSTS_REQUEST } from \"../../reducers/post\";\r\nimport PostCard from \"../../components/PostCard\";\r\nimport wrapper from \"../../store/configureStore\";\r\nimport { LOAD_MY_INFO_REQUEST } from \"../../reducers/user\";\r\nimport AppLayout from \"../../components/AppLayout\";\r\n\r\nconst Hashtag = () => {\r\n  const dispatch = useDispatch();\r\n  const router = useRouter();\r\n  const { tag } = router.query;\r\n  const { mainPosts, hasMorePosts, loadHashtagPostsLoading } = useSelector(\r\n    (state) => state.post\r\n  );\r\n\r\n  const [ref, inView, entry] = useInView();\r\n  useEffect(() => {\r\n    if (inView && hasMorePosts && !loadPostsLoading) {\r\n      dispatch({\r\n        type: LOAD_HASHTAG_POSTS_REQUEST,\r\n        lastId:\r\n          mainPosts[mainPosts.length - 1] && mainPosts[mainPosts.length - 1].id,\r\n        data: tag,\r\n      });\r\n    }\r\n  }, [inView, hasMorePosts, loadHashtagPostsLoading, mainPosts]);\r\n\r\n  return (\r\n    <AppLayout>\r\n      {mainPosts.map((c) => (\r\n        <PostCard key={c.id} post={c} />\r\n      ))}\r\n      <div\r\n        ref={hasMorePosts && !loadHashtagPostsLoading ? ref : undefined}\r\n        style={{ height: 40 }}\r\n      />\r\n    </AppLayout>\r\n  );\r\n};\r\n\r\nexport const getServerSideProps = wrapper.getServerSideProps(\r\n  async (context) => {\r\n    console.log(context);\r\n    const cookie = context.req ? context.req.headers.cookie : \"\";\r\n    console.log(context);\r\n    axios.defaults.headers.Cookie = \"\";\r\n    if (context.req && cookie) {\r\n      axios.defaults.headers.Cookie = cookie;\r\n    }\r\n    context.store.dispatch({\r\n      type: LOAD_MY_INFO_REQUEST,\r\n    });\r\n    context.store.dispatch({\r\n      type: LOAD_HASHTAG_POSTS_REQUEST,\r\n      data: context.params.tag,\r\n    });\r\n    context.store.dispatch(END);\r\n    await context.store.sagaTask.toPromise();\r\n    return { props: {} };\r\n  }\r\n);\r\n\r\nexport default Hashtag;\r\n","\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/hashtag/[tag]\",\n      function () {\n        return require(\"private-next-pages/hashtag/[tag].js\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/hashtag/[tag]\"])\n      });\n    }\n  ","import * as React from 'react';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nconst observerMap = new Map();\nconst RootIds = new WeakMap();\nlet rootId = 0;\nlet unsupportedValue = undefined;\n/**\r\n * What should be the default behavior if the IntersectionObserver is unsupported?\r\n * Ideally the polyfill has been loaded, you can have the following happen:\r\n * - `undefined`: Throw an error\r\n * - `true` or `false`: Set the `inView` value to this regardless of intersection state\r\n * **/\n\nfunction defaultFallbackInView(inView) {\n  unsupportedValue = inView;\n}\n/**\r\n * Generate a unique ID for the root element\r\n * @param root\r\n */\n\nfunction getRootId(root) {\n  if (!root) return '0';\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n/**\r\n * Convert the options to a string Id, based on the values.\r\n * Ensures we can reuse the same observer when observing elements with the same options.\r\n * @param options\r\n */\n\n\nfunction optionsToId(options) {\n  return Object.keys(options).sort().filter(key => options[key] !== undefined).map(key => {\n    return `${key}_${key === 'root' ? getRootId(options.root) : options[key]}`;\n  }).toString();\n}\n\nfunction createObserver(options) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  let id = optionsToId(options);\n  let instance = observerMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    const elements = new Map();\n    let thresholds;\n    const observer = new IntersectionObserver(entries => {\n      entries.forEach(entry => {\n        var _elements$get;\n\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        const inView = entry.isIntersecting && thresholds.some(threshold => entry.intersectionRatio >= threshold); // @ts-ignore support IntersectionObserver v2\n\n        if (options.trackVisibility && typeof entry.isVisible === 'undefined') {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        (_elements$get = elements.get(entry.target)) == null ? void 0 : _elements$get.forEach(callback => {\n          callback(inView, entry);\n        });\n      });\n    }, options); // Ensure we have a valid thresholds array. If not, use the threshold from the options\n\n    thresholds = observer.thresholds || (Array.isArray(options.threshold) ? options.threshold : [options.threshold || 0]);\n    instance = {\n      id,\n      observer,\n      elements\n    };\n    observerMap.set(id, instance);\n  }\n\n  return instance;\n}\n/**\r\n * @param element - DOM Element to observe\r\n * @param callback - Callback function to trigger when intersection status changes\r\n * @param options - Intersection Observer options\r\n * @param fallbackInView - Fallback inView value.\r\n * @return Function - Cleanup function that should be triggered to unregister the observer\r\n */\n\n\nfunction observe(element, callback, options = {}, fallbackInView = unsupportedValue) {\n  if (typeof window.IntersectionObserver === 'undefined' && fallbackInView !== undefined) {\n    const bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio: typeof options.threshold === 'number' ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds\n    });\n    return () => {// Nothing to cleanup\n    };\n  } // An observer with the same options can be reused, so lets use this fact\n\n\n  const {\n    id,\n    observer,\n    elements\n  } = createObserver(options); // Register the callback listener for this element\n\n  let callbacks = elements.get(element) || [];\n\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      observerMap.delete(id);\n    }\n  };\n}\n\nconst _excluded = [\"children\", \"as\", \"triggerOnce\", \"threshold\", \"root\", \"rootMargin\", \"onChange\", \"skip\", \"trackVisibility\", \"delay\", \"initialInView\", \"fallbackInView\"];\n\nfunction isPlainChildren(props) {\n  return typeof props.children !== 'function';\n}\n/**\r\n ## Render props\r\n\n To use the `<InView>` component, you pass it a function. It will be called\r\n whenever the state changes, with the new value of `inView`. In addition to the\r\n `inView` prop, children also receive a `ref` that should be set on the\r\n containing DOM element. This is the element that the IntersectionObserver will\r\n monitor.\r\n\n If you need it, you can also access the\r\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\r\n on `entry`, giving you access to all the details about the current intersection\r\n state.\r\n\n ```jsx\r\n import { InView } from 'react-intersection-observer';\r\n\n const Component = () => (\r\n <InView>\r\n {({ inView, ref, entry }) => (\r\n      <div ref={ref}>\r\n        <h2>{`Header inside viewport ${inView}.`}</h2>\r\n      </div>\r\n    )}\r\n </InView>\r\n );\r\n\n export default Component;\r\n ```\r\n\n ## Plain children\r\n\n You can pass any element to the `<InView />`, and it will handle creating the\r\n wrapping DOM element. Add a handler to the `onChange` method, and control the\r\n state in your own component. Any extra props you add to `<InView>` will be\r\n passed to the HTML element, allowing you set the `className`, `style`, etc.\r\n\n ```jsx\r\n import { InView } from 'react-intersection-observer';\r\n\n const Component = () => (\r\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\r\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\r\n </InView>\r\n );\r\n\n export default Component;\r\n ```\r\n */\n\n\nclass InView extends React.Component {\n  constructor(props) {\n    super(props);\n    this.node = null;\n    this._unobserveCb = null;\n\n    this.handleNode = node => {\n      if (this.node) {\n        // Clear the old observer, before we start observing a new element\n        this.unobserve();\n\n        if (!node && !this.props.triggerOnce && !this.props.skip) {\n          // Reset the state if we get a new node, and we aren't ignoring updates\n          this.setState({\n            inView: !!this.props.initialInView,\n            entry: undefined\n          });\n        }\n      }\n\n      this.node = node ? node : null;\n      this.observeNode();\n    };\n\n    this.handleChange = (inView, entry) => {\n      if (inView && this.props.triggerOnce) {\n        // If `triggerOnce` is true, we should stop observing the element.\n        this.unobserve();\n      }\n\n      if (!isPlainChildren(this.props)) {\n        // Store the current State, so we can pass it to the children in the next render update\n        // There's no reason to update the state for plain children, since it's not used in the rendering.\n        this.setState({\n          inView,\n          entry\n        });\n      }\n\n      if (this.props.onChange) {\n        // If the user is actively listening for onChange, always trigger it\n        this.props.onChange(inView, entry);\n      }\n    };\n\n    this.state = {\n      inView: !!props.initialInView,\n      entry: undefined\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (prevProps.rootMargin !== this.props.rootMargin || prevProps.root !== this.props.root || prevProps.threshold !== this.props.threshold || prevProps.skip !== this.props.skip || prevProps.trackVisibility !== this.props.trackVisibility || prevProps.delay !== this.props.delay) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unobserve();\n    this.node = null;\n  }\n\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const {\n      threshold,\n      root,\n      rootMargin,\n      trackVisibility,\n      delay,\n      fallbackInView\n    } = this.props;\n    this._unobserveCb = observe(this.node, this.handleChange, {\n      threshold,\n      root,\n      rootMargin,\n      // @ts-ignore\n      trackVisibility,\n      // @ts-ignore\n      delay\n    }, fallbackInView);\n  }\n\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n\n      this._unobserveCb = null;\n    }\n  }\n\n  render() {\n    if (!isPlainChildren(this.props)) {\n      const {\n        inView,\n        entry\n      } = this.state;\n      return this.props.children({\n        inView,\n        entry,\n        ref: this.handleNode\n      });\n    }\n\n    const _this$props = this.props,\n          {\n      children,\n      as\n    } = _this$props,\n          props = _objectWithoutPropertiesLoose(_this$props, _excluded);\n\n    return React.createElement(as || 'div', _extends({\n      ref: this.handleNode\n    }, props), children);\n  }\n\n}\n\n/**\r\n * React Hooks make it easy to monitor the `inView` state of your components. Call\r\n * the `useInView` hook with the (optional) [options](#options) you need. It will\r\n * return an array containing a `ref`, the `inView` status and the current\r\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\r\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\r\n * report the status.\r\n *\r\n * @example\r\n * ```jsx\r\n * import React from 'react';\r\n * import { useInView } from 'react-intersection-observer';\r\n *\r\n * const Component = () => {\r\n *   const { ref, inView, entry } = useInView({\r\n *       threshold: 0,\r\n *   });\r\n *\r\n *   return (\r\n *     <div ref={ref}>\r\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\r\n *     </div>\r\n *   );\r\n * };\r\n * ```\r\n */\n\nfunction useInView({\n  threshold,\n  delay,\n  trackVisibility,\n  rootMargin,\n  root,\n  triggerOnce,\n  skip,\n  initialInView,\n  fallbackInView,\n  onChange\n} = {}) {\n  var _state$entry;\n\n  const [ref, setRef] = React.useState(null);\n  const callback = React.useRef();\n  const [state, setState] = React.useState({\n    inView: !!initialInView,\n    entry: undefined\n  }); // Store the onChange callback in a `ref`, so we can access the latest instance\n  // inside the `useEffect`, but without triggering a rerender.\n\n  callback.current = onChange;\n  React.useEffect(() => {\n    // Ensure we have node ref, and that we shouldn't skip observing\n    if (skip || !ref) return;\n    let unobserve;\n    unobserve = observe(ref, (inView, entry) => {\n      setState({\n        inView,\n        entry\n      });\n      if (callback.current) callback.current(inView, entry);\n\n      if (entry.isIntersecting && triggerOnce && unobserve) {\n        // If it should only trigger once, unobserve the element after it's inView\n        unobserve();\n        unobserve = undefined;\n      }\n    }, {\n      root,\n      rootMargin,\n      threshold,\n      // @ts-ignore\n      trackVisibility,\n      // @ts-ignore\n      delay\n    }, fallbackInView);\n    return () => {\n      if (unobserve) {\n        unobserve();\n      }\n    };\n  }, // We break the rule here, because we aren't including the actual `threshold` variable\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [// If the threshold is an array, convert it to a string, so it won't change between renders.\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  Array.isArray(threshold) ? threshold.toString() : threshold, ref, root, rootMargin, triggerOnce, skip, trackVisibility, fallbackInView, delay]);\n  const entryTarget = (_state$entry = state.entry) == null ? void 0 : _state$entry.target;\n  const previousEntryTarget = React.useRef();\n\n  if (!ref && entryTarget && !triggerOnce && !skip && previousEntryTarget.current !== entryTarget) {\n    // If we don't have a node ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n    // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n    previousEntryTarget.current = entryTarget;\n    setState({\n      inView: !!initialInView,\n      entry: undefined\n    });\n  }\n\n  const result = [setRef, state.inView, state.entry]; // Support object destructuring, by adding the specific values.\n\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n  return result;\n}\n\nexport { InView, defaultFallbackInView, observe, useInView };\n//# sourceMappingURL=react-intersection-observer.modern.mjs.map\n"],"names":["__webpack_exports__","dispatch","useDispatch","tag","router","useRouter","query","_useSelector","useSelector","state","post","mainPosts","hasMorePosts","loadHashtagPostsLoading","_useInView","useInView","_useInView2","C_Users_ksh99_OneDrive_react_nodebird_prepare_front_node_modules_next_dist_compiled_babel_runtime_helpers_esm_slicedToArray_js__WEBPACK_IMPORTED_MODULE_8__","Z","ref","inView","useEffect","loadPostsLoading","type","LOAD_HASHTAG_POSTS_REQUEST","lastId","length","id","data","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__","jsxs","_components_AppLayout__WEBPACK_IMPORTED_MODULE_5__","children","map","c","jsx","_components_PostCard__WEBPACK_IMPORTED_MODULE_4__","undefined","style","height","window","__NEXT_P","push","__webpack_require__","unsupportedValue","observerMap","Map","RootIds","WeakMap","rootId","threshold","delay","trackVisibility","rootMargin","root","triggerOnce","skip","initialInView","fallbackInView","onChange","_state$entry","setRef","react__WEBPACK_IMPORTED_MODULE_0__","useState","callback","useRef","setState","entry","current","unobserve","observe","element","options","IntersectionObserver","bounds","getBoundingClientRect","isIntersecting","target","intersectionRatio","time","boundingClientRect","intersectionRect","rootBounds","observer","elements","createObserver","Object","keys","sort","filter","key","has","set","toString","get","instance","thresholds","entries","forEach","_elements$get","some","isVisible","Array","isArray","callbacks","splice","indexOf","delete","size","disconnect","entryTarget","previousEntryTarget","result"],"sourceRoot":""}